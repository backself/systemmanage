<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--  当前项目作为父模块的属性信息  -->
    <groupId>os.g.zone</groupId>
    <artifactId>back</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>back</name>
    <description>back</description>

    <!--  设置父模块打包为pom文件以供子模块依赖  -->
    <packaging>pom</packaging>

    <!--  引入子模块依赖  -->
    <modules>
        <!--  module标签中间填写的是子模块的artifactId值  -->
        <module>commons</module>
        <module>messages</module>
        <module>system</module>
        <module>products</module>
        <module>stocks</module>
        <module>carts</module>
        <module>expresses</module>
        <module>orders</module>
        <module>pay</module>
        <module>reports</module>
        <module>msg-task</module>
        <module>gateway</module>
    </modules>

    <properties>
        <!--自定义模块 自定义属性配置-->
        <os.g.zone.common.services.version>0.0.1-SNAPSHOT</os.g.zone.common.services.version>
        <os.g.zone.commons.version>0.0.1-SNAPSHOT</os.g.zone.commons.version>
        <!--针对框架内 自定义属性配置-->
        <spring-boot-dependencies.version>2.5.9</spring-boot-dependencies.version>
        <mybatis-plus-boot.version>3.5.3.1</mybatis-plus-boot.version>
        <druid.version>1.2.16</druid.version>
        <rocketmq-spring-boot.version>2.2.3</rocketmq-spring-boot.version>
        <spring-cloud.version>2020.0.3</spring-cloud.version>
        <spring-cloud-alibaba.version>2.2.2.RELEASE</spring-cloud-alibaba.version>
        <pagehelper-spring-boot.version>1.4.0</pagehelper-spring-boot.version>
        <fastjson.version>1.2.76</fastjson.version>
        <jdbc.version>8.0.28</jdbc.version>
        <quartz.version>2.5.9</quartz.version>
        <!--内置属性配置-->
        <project.bulid.sourceEncoding>UTF-8</project.bulid.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <java.version>1.8</java.version>
        <!-- 方式1.打包跳过测试：不会编译测试类，不生成test的所有.class     -->
        <!-- <maven.test.skip>true</maven.test.skip> -->
        <!-- 方式2.打包跳过测试：会编译测试类，即生成.class文件，只是不运行测试类  -->
        <skipTests>true</skipTests>
    </properties>

    <!--配置整个项目及子项目共享依赖 子项目不需要重新添加依赖-->
    <dependencies>
        <!--自动生成getter/setter 方法插件-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <!--JSON 支持-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${fastjson.version}</version>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <!--  引入自定义公共模块依赖  -->
            <dependency>
                <groupId>os.g.zone</groupId>
                <artifactId>commons</artifactId>
                <version>${os.g.zone.commons.version}</version>
            </dependency>
            <!-- Spring Cloud家族 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud alibaba 依赖-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 配置SpringBoot的依赖-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-dependencies.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!--集成rocket mq-->
            <dependency>
                <groupId>org.apache.rocketmq</groupId>
                <artifactId>rocketmq-spring-boot-starter</artifactId>
                <version>${rocketmq-spring-boot.version}</version>
            </dependency>
            <!--第三方依赖-->
            <!--mybatisPlus依赖-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus-boot.version}</version>
            </dependency>
            <!--druid 数据库连接池-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${jdbc.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-quartz</artifactId>
                <version>${quartz.version}</version>
            </dependency>
        </dependencies>

    </dependencyManagement>

    <build>
<!--   在构建多模块项目中出现子模块依赖其他模块时，spring boot maven plugins插件不能出现在父pom文件中，spring boot maven plugins插件只允许出现在子modulepom文件中   -->
    <!--原因：
            由于spring boot maven plugins打出来的包是不可被依赖的，它在打包过程中会设定当前项目的启动类，
            如果此插件出现在父pom文件，而子模块同样出现该类型插件，那么子模块打包时就出现无法依赖夫模块的异常，一个项目中不可能出现两个启动类的！
     -->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                <!--编译过程中最好指定编译的jdk版本，否则可能出现java8 新特性无法识别异常-->
                    <source>1.8</source>
                    <target>1.8</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
